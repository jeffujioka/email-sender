version: '3.8'
volumes:
    email-data-volume:
networks: 
    database:
    frontend:
    queue_network:
services:
    email-sender-db:
        image: postgres:12.3
        volumes:
            # data vollume
            - email-data-volume:/var/lib/postgresql/data
            # Scripts
            - ./scripts:/scripts
            - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
        environment: 
            - POSTGRES_USERS=postgres
            - POSTGRES_PASSWORD=postgres
        networks:
            - database

    frontend:
        # nginx:1.18 is not working ->
        # nginx: [emerg] socket() [::]:80 failed (97: Address family not supported by protocol)
        image: nginx:1.17 
        volumes:
            - ./web:/usr/share/nginx/html/
            # reverse proxy config
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        ports:
            - 80:80
        networks: 
            - frontend
        depends_on: 
            - backend
    backend:
        build: backend
        volumes:
            # Application
            - ./backend:/backend
        environment: 
            - ENV_ESENDER_DB_HOSTNAME=email-sender-db
            - ENV_ESENDER_DB_NAME=email_sender
            - ENV_ESENDER_DB_USER=postgres
            - ENV_ESENDER_DB_PASSWORD=postgres
            - ENV_ESENDER_REDIS_HOSTNAME=queue
            - ENV_ESENDER_REDIS_PORT=6379
        working_dir: /backend
        # this version also works -> 
        # command: chmod +x && ./backend_app.sh  # deprecated (using Dockerfile)
        # command: bash ./backend_app.sh         # deprecated (using Dockerfile)
        command: ./sender.py
        networks: 
            - database
            - frontend
            - queue_network
        depends_on: 
            - email-sender-db
            - queue
    queue:
        image: redis:3.2
        networks:
            - queue_network
    worker:
        build: worker
        volumes:
            - ./worker:/worker
        working_dir: /worker
        command: ./worker.py
        networks: 
            - queue_network
        depends_on: 
            - queue
            - backend